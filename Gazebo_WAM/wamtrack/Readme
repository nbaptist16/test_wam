Stitching together patchwork code since 2005.
A controllable sdf combining the WAM and what I've just today learned is officially referred to as the RTU (robot transport unit).

Below are copied quickstart instructions that can also be found in the other Gazebo_WAM packages (written by Ben Blumer, edited by yours truly)

1. Add the folders to the environment variables, so that Gazebo knows where to look.
On a linux shell: 
  "export GAZEBO_MODEL_PATH=location/to/wam/model/folder/:$GAZEBO_MODEL_PATH"
  "export GAZEBO_PLUGIN_PATH=location/to/wam/model/folder/WAM\ Model\ ROS:${GAZEBO_PLUGIN_PATH}"
Notice: The model path should point to the folder that contains "WAM Model ROS", 
where as the plugin path should point to the folder itself.

2. Compile the plugins. 
 In a terminal:
 Navigate to WAM Model ROS.
 Make the compiling script executable "chmod +x doit.sh".
 Execute the compiling script "./doit.sh"

3. Run roscore.
 in a different terminal, type "roscore". 

4. Run the ROS plugin to publish the trajectories. 
 In a different terminal, navigate to WAM Model ROS. 
 Make the python script executable by typing "chmod +x exampleROSNode.py"
 Then execute it: "./exampleROSNode.py".
 
 You should see it spewing out a bunch of messages along the lines of "Published a trajectory".

5. Run Gazebo and launch the WAM.
 In a different terminal, navigate to WAM Model ROS.
 type "gazebo wam_world.sdf"

After a second, you should see the WAM arm sitting on the ground, and it should start moving to the trajectory being published by the ROS node.



<!-- added by nckmlb -->
Edit CMakeLists.txt
  (https://answers.gazebosim.org//question/25073/gazeboexamplespluginscamera-build-error/)

Edit ros_wam_plugin.cc
  (https://github.com/osrf/car_demo/issues/35)

Edit step 1 @ quickstart: export GAZEBO_MODEL_PATH=/home/nckmlb/test_wam/src/Gazebo_WAM/:$GAZEBO_MODEL_PATH
                          export GAZEBO_PLUGIN_PATH=/home/nckmlb/test_wam/src/Gazebo_WAM/WAM\ Model\ ROS:${GAZEBO_PLUGIN_PATH}

Edit step 4 @ quickstart: chmod +x exampleROSNode.py
                          python3 exampleROSNode.py
	or
	edit shebang in exampleROSNode.py (from #!/usr/bin/env python) to #!/usr/bin/env python3
	then ./exampleROSNode.py should work fine
