/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-05-02 12:33:21.291946
/// Generated using solver translationdirection5d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=((0.875)*x1);
x3=IKcos(j[3]);
x4=(x1*x3);
x5=(x0*x4);
x6=IKsin(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[2]);
x9=(x7*x8);
x10=IKcos(j[1]);
x11=IKcos(j[2]);
x12=(x10*x11);
x13=(x0*x12);
x14=(x4*x7);
x15=(x0*x8);
x16=(x12*x7);
x17=(x10*x3);
x18=(x1*x11*x6);
eetrans[0]=((((0.835)*x5))+((x0*x2))+((x6*(((((0.835)*x13))+(((-1.0)*(0.835)*x9)))))));
eetrans[1]=((((0.835)*x14))+((x2*x7))+((x6*(((((0.835)*x15))+(((0.835)*x16)))))));
eetrans[2]=((0.125)+(((0.875)*x10))+(((0.835)*x17))+(((-1.0)*(0.835)*x18)));
eerot[0]=(x5+((x6*((x13+(((-1.0)*(1.0)*x9)))))));
eerot[1]=(x14+((x6*((x15+x16)))));
eerot[2]=(x17+(((-1.0)*(1.0)*x18)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.125)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j1eval[1];
IkReal x19=px*px*px*px;
IkReal x20=((1.0)*(r01*r01*r01*r01));
IkReal x21=py*py*py*py;
IkReal x22=((1.0)*(r00*r00*r00*r00));
IkReal x23=py*py*py;
IkReal x24=r00*r00*r00;
IkReal x25=px*px*px;
IkReal x26=r01*r01*r01;
IkReal x27=px*px;
IkReal x28=pz*pz;
IkReal x29=(x27*x28);
IkReal x30=r01*r01;
IkReal x31=r02*r02;
IkReal x32=((1.0)*x30*x31);
IkReal x33=py*py;
IkReal x34=(x28*x33);
IkReal x35=r00*r00;
IkReal x36=((1.0)*x31*x35);
IkReal x37=((2.0)*x28);
IkReal x38=(r00*x30);
IkReal x39=(r01*x35);
IkReal x40=(x27*x33);
IkReal x41=((1.0)*x30*x35);
j1eval[0]=((((-1.0)*x19*x20))+(((-1.0)*x19*x32))+(((-1.0)*x20*x29))+(((-1.0)*x21*x22))+(((-1.0)*x21*x36))+(((-1.0)*x22*x34))+(((-1.0)*x29*x41))+(((-1.0)*x32*x40))+(((-1.0)*x34*x41))+(((-1.0)*x36*x40))+(((2.0)*pz*r02*x23*x39))+(((2.0)*pz*r02*x25*x38))+(((4.0)*px*r01*x23*x24))+(((4.0)*py*r00*x25*x26))+(((-6.0)*x27*x30*x33*x35))+((px*py*r00*x26*x37))+((px*py*r01*x24*x37))+(((2.0)*px*pz*r02*x24*x33))+(((2.0)*px*r00*r01*x23*x31))+(((2.0)*py*pz*r02*x26*x27))+(((2.0)*py*r00*r01*x25*x31))+(((-4.0)*px*pz*r02*x33*x38))+(((-4.0)*py*pz*r02*x27*x39)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
CheckValue<IkReal> x42=IKPowWithIntegerCheck(((((-5.49774265289307)*(px*px*px*px)*(r01*r01*r01*r01)))+(((-5.49774265289307)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-5.49774265289307)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-5.49774265289307)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((-5.49774265289307)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-5.49774265289307)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*px*r01*(py*py*py)*(r00*r00*r00)))+(((21.9909706115723)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.49774265289307)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((-5.49774265289307)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((-5.49774265289307)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-5.49774265289307)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-32.9864559173584)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((10.9954853057861)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((10.9954853057861)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((10.9954853057861)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((10.9954853057861)*px*r00*r01*(py*py*py)*(r02*r02)))+(((10.9954853057861)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((10.9954853057861)*py*r00*r01*(px*px*px)*(r02*r02)))+(((10.9954853057861)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((10.9954853057861)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((-21.9909706115723)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-21.9909706115723)*py*pz*r01*r02*(px*px)*(r00*r00)))),-1);
if(!x42.valid){
continue;
}
IkReal x43=((((6.28313446044922)*pz*(px*px*px*px)*(r01*r01*r01*r01)))+(((6.28313446044922)*pz*(py*py*py*py)*(r00*r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r01*r01*r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00*r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r01*r01*r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00*r00*r00)))+(((-10.4928345489502)*r02*(px*px*px*px)*(r01*r01)))+(((-10.4928345489502)*r02*(py*py*py*py)*(r00*r00)))+(((6.28313446044922)*px*r02*(py*py*py*py)*(r00*r00*r00)))+(((6.28313446044922)*py*r02*(px*px*px*px)*(r01*r01*r01)))+(((6.28313446044922)*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((6.28313446044922)*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((6.28313446044922)*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((6.28313446044922)*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((12.5662689208984)*pz*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((12.5662689208984)*pz*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((10.4928345489502)*px*pz*(py*py)*(r00*r00*r00)))+(((10.4928345489502)*py*pz*(px*px)*(r01*r01*r01)))+(((10.4928345489502)*pz*r00*(px*px*px)*(r01*r01)))+(((10.4928345489502)*pz*r01*(py*py*py)*(r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r00*r00)*(r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((-6.28313446044922)*pz*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r00*r00)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r01*r01)))+(((-0.429766397094727)*px*r02*(py*py)*(r00*r00*r00)))+(((-0.429766397094727)*py*r02*(px*px)*(r01*r01*r01)))+(((-0.429766397094727)*r00*r02*(px*px*px)*(r01*r01)))+(((-0.429766397094727)*r01*r02*(py*py*py)*(r00*r00)))+(((12.5662689208984)*px*pz*r00*(py*py*py)*(r01*r01*r01)))+(((12.5662689208984)*py*pz*r01*(px*px*px)*(r00*r00*r00)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((62.8313446044922)*pz*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((20.9856690979004)*px*r00*r01*r02*(py*py*py)))+(((20.9856690979004)*py*r00*r01*r02*(px*px*px)))+(((0.859532794189453)*px*r00*r02*(py*py)*(r01*r01)))+(((0.859532794189453)*py*r01*r02*(px*px)*(r00*r00)))+(((-6.28313446044922)*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((-6.28313446044922)*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((-12.5662689208984)*px*py*r00*(pz*pz*pz)*(r01*r01*r01)))+(((-12.5662689208984)*px*py*r01*(pz*pz*pz)*(r00*r00*r00)))+(((-12.5662689208984)*px*r00*r02*(py*py*py*py)*(r01*r01)))+(((-12.5662689208984)*py*r01*r02*(px*px*px*px)*(r00*r00)))+(((-18.8494033813477)*px*r02*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-18.8494033813477)*py*r02*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-18.8494033813477)*r00*r02*(px*px*px)*(pz*pz)*(r01*r01)))+(((-18.8494033813477)*r01*r02*(py*py*py)*(pz*pz)*(r00*r00)))+(((-37.6988067626953)*px*pz*r01*(py*py*py)*(r00*r00*r00)))+(((-37.6988067626953)*py*pz*r00*(px*px*px)*(r01*r01*r01)))+(((-20.9856690979004)*px*pz*r00*(py*py)*(r01*r01)))+(((-20.9856690979004)*py*pz*r01*(px*px)*(r00*r00)))+(((-0.859532794189453)*px*py*pz*r00*(r01*r01*r01)))+(((-0.859532794189453)*px*py*pz*r01*(r00*r00*r00)))+(((37.6988067626953)*px*r00*r02*(py*py)*(pz*pz)*(r01*r01)))+(((37.6988067626953)*py*r01*r02*(px*px)*(pz*pz)*(r00*r00)))+(((-25.1325378417969)*px*pz*r00*r01*(py*py*py)*(r02*r02)))+(((-25.1325378417969)*py*pz*r00*r01*(px*px*px)*(r02*r02))));
if((((x43*x43)+(((((((21.9909706115723)*(px*px*px*px)*(r01*r01*r01*r01)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00*r00*r00)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((21.9909706115723)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((131.945823669434)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-87.9638824462891)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-87.9638824462891)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((-43.9819412231445)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((-43.9819412231445)*px*r00*r01*(py*py*py)*(r02*r02)))+(((-43.9819412231445)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((-43.9819412231445)*py*r00*r01*(px*px*px)*(r02*r02)))+(((-43.9819412231445)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((-43.9819412231445)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((87.9638824462891)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((87.9638824462891)*py*pz*r01*r02*(px*px)*(r00*r00)))))*(((((5.25216185455322)*(px*px*px*px)*(r01*r01*r01*r01)))+(((5.25216185455322)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r01*r01*r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00*r00*r00)))+(((-5.00658105621338)*(px*px*px*px)*(r01*r01)))+(((-5.00658105621338)*(py*py*py*py)*(r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((0.245580798339844)*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((0.245580798339844)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((5.99590545654297)*px*(py*py*py*py)*(r00*r00*r00)))+(((5.99590545654297)*py*(px*px*px*px)*(r01*r01*r01)))+(((5.99590545654297)*r00*(px*px*px*px*px)*(r01*r01)))+(((5.99590545654297)*r01*(py*py*py*py*py)*(r00*r00)))+(((5.99590545654297)*(px*px)*(py*py*py)*(r01*r01*r01)))+(((5.99590545654297)*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-1.79518127441406)*(px*px)*(py*py*py*py)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px*px*px)*(py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00)*(r01*r01)))+(((-3.59036254882813)*(px*px)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-3.59036254882813)*(px*px*px*px)*(py*py)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(px*px*px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.410119933227539)*px*(py*py)*(r00*r00*r00)))+(((-0.410119933227539)*py*(px*px)*(r01*r01*r01)))+(((-0.410119933227539)*r00*(px*px*px)*(r01*r01)))+(((-0.410119933227539)*r01*(py*py*py)*(r00*r00)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r00*r00)*(r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00)*(r01*r01)))+(((-5.00658105621338)*(px*px)*(py*py)*(r00*r00)))+(((-5.00658105621338)*(px*px)*(py*py)*(r01*r01)))+(((3.59036254882813)*px*r00*(py*py*py*py*py)*(r01*r01*r01)))+(((3.59036254882813)*px*r01*(py*py*py*py*py)*(r00*r00*r00)))+(((3.59036254882813)*py*r00*(px*px*px*px*px)*(r01*r01*r01)))+(((3.59036254882813)*py*r01*(px*px*px*px*px)*(r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r01*r01*r01*r01)))+(((3.59036254882813)*(px*px*px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*r00*(px*px*px)*(py*py*py)*(r01*r01*r01)))+(((7.18072509765625)*r01*(px*px*px)*(py*py*py)*(r00*r00*r00)))+(((0.820239866455078)*px*r00*(py*py)*(r01*r01)))+(((0.820239866455078)*py*r01*(px*px)*(r00*r00)))+(((30.53064793396)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((0.0167977266064453)*px*py*r00*(r01*r01*r01)))+(((0.0167977266064453)*px*py*r01*(r00*r00*r00)))+(((10.0131621124268)*px*r00*r01*(py*py*py)))+(((10.0131621124268)*py*r00*r01*(px*px*px)))+(((11.9918109130859)*pz*r02*(px*px*px*px)*(r01*r01)))+(((11.9918109130859)*pz*r02*(py*py*py*py)*(r00*r00)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-7.18072509765625)*(px*px*px*px)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-7.18072509765625)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-5.38554382324219)*(px*px)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-5.38554382324219)*(px*px*px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.491161596679688)*px*r00*(py*py*py)*(r01*r01*r01)))+(((-0.491161596679688)*py*r01*(px*px*px)*(r00*r00*r00)))+(((-20.5174858215332)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-20.5174858215332)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.99590545654297)*px*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-5.99590545654297)*py*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(py*py)*(r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(pz*pz)*(r01*r01)))+(((-5.99590545654297)*r01*(px*px)*(py*py*py)*(r00*r00)))+(((-5.99590545654297)*r01*(py*py*py)*(pz*pz)*(r00*r00)))+(((-11.9918109130859)*px*r00*(py*py*py*py)*(r01*r01)))+(((-11.9918109130859)*py*r01*(px*px*px*px)*(r00*r00)))+(((3.59036254882813)*px*py*r00*(pz*pz*pz*pz)*(r01*r01*r01)))+(((3.59036254882813)*px*py*r01*(pz*pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*px*r02*(py*py)*(pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*py*r02*(px*px)*(pz*pz*pz)*(r01*r01*r01)))+(((7.18072509765625)*r00*r02*(px*px*px)*(pz*pz*pz)*(r01*r01)))+(((7.18072509765625)*r01*r02*(py*py*py)*(pz*pz*pz)*(r00*r00)))+(((21.5421752929688)*px*r01*(py*py*py)*(pz*pz)*(r00*r00*r00)))+(((21.5421752929688)*py*r00*(px*px*px)*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((0.491161596679688)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((0.491161596679688)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((0.491161596679688)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((0.491161596679688)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((11.9918109130859)*px*r00*(py*py)*(pz*pz)*(r01*r01)))+(((11.9918109130859)*py*r01*(px*px)*(pz*pz)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r01*r01)))+(((-7.18072509765625)*px*pz*r02*(py*py*py*py)*(r00*r00*r00)))+(((-7.18072509765625)*px*r00*(py*py*py)*(pz*pz)*(r01*r01*r01)))+(((-7.18072509765625)*py*pz*r02*(px*px*px*px)*(r01*r01*r01)))+(((-7.18072509765625)*py*r01*(px*px*px)*(pz*pz)*(r00*r00*r00)))+(((-7.18072509765625)*pz*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((-7.18072509765625)*pz*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((-7.18072509765625)*pz*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((-7.18072509765625)*pz*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-35.9036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*pz*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((7.18072509765625)*pz*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((14.3614501953125)*px*pz*r00*r02*(py*py*py*py)*(r01*r01)))+(((14.3614501953125)*px*r00*r01*(py*py*py)*(pz*pz)*(r02*r02)))+(((14.3614501953125)*py*pz*r01*r02*(px*px*px*px)*(r00*r00)))+(((14.3614501953125)*py*r00*r01*(px*px*px)*(pz*pz)*(r02*r02)))+(((-14.3614501953125)*px*r00*r02*(py*py)*(pz*pz*pz)*(r01*r01)))+(((-14.3614501953125)*py*r01*r02*(px*px)*(pz*pz*pz)*(r00*r00)))+(((-0.982323193359375)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-0.982323193359375)*py*pz*r01*r02*(px*px)*(r00*r00)))+(((-23.9836218261719)*px*pz*r00*r01*r02*(py*py*py)))+(((-23.9836218261719)*py*pz*r00*r01*r02*(px*px*px))))))))) < -0.00001)
continue;
cj1array[0]=((0.5)*(x42.value)*(((IKsqrt(((x43*x43)+(((((((21.9909706115723)*(px*px*px*px)*(r01*r01*r01*r01)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00*r00*r00)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((21.9909706115723)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((131.945823669434)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-87.9638824462891)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-87.9638824462891)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((-43.9819412231445)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((-43.9819412231445)*px*r00*r01*(py*py*py)*(r02*r02)))+(((-43.9819412231445)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((-43.9819412231445)*py*r00*r01*(px*px*px)*(r02*r02)))+(((-43.9819412231445)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((-43.9819412231445)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((87.9638824462891)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((87.9638824462891)*py*pz*r01*r02*(px*px)*(r00*r00)))))*(((((5.25216185455322)*(px*px*px*px)*(r01*r01*r01*r01)))+(((5.25216185455322)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r01*r01*r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00*r00*r00)))+(((-5.00658105621338)*(px*px*px*px)*(r01*r01)))+(((-5.00658105621338)*(py*py*py*py)*(r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((0.245580798339844)*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((0.245580798339844)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((5.99590545654297)*px*(py*py*py*py)*(r00*r00*r00)))+(((5.99590545654297)*py*(px*px*px*px)*(r01*r01*r01)))+(((5.99590545654297)*r00*(px*px*px*px*px)*(r01*r01)))+(((5.99590545654297)*r01*(py*py*py*py*py)*(r00*r00)))+(((5.99590545654297)*(px*px)*(py*py*py)*(r01*r01*r01)))+(((5.99590545654297)*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-1.79518127441406)*(px*px)*(py*py*py*py)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px*px*px)*(py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00)*(r01*r01)))+(((-3.59036254882813)*(px*px)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-3.59036254882813)*(px*px*px*px)*(py*py)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(px*px*px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.410119933227539)*px*(py*py)*(r00*r00*r00)))+(((-0.410119933227539)*py*(px*px)*(r01*r01*r01)))+(((-0.410119933227539)*r00*(px*px*px)*(r01*r01)))+(((-0.410119933227539)*r01*(py*py*py)*(r00*r00)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r00*r00)*(r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00)*(r01*r01)))+(((-5.00658105621338)*(px*px)*(py*py)*(r00*r00)))+(((-5.00658105621338)*(px*px)*(py*py)*(r01*r01)))+(((3.59036254882813)*px*r00*(py*py*py*py*py)*(r01*r01*r01)))+(((3.59036254882813)*px*r01*(py*py*py*py*py)*(r00*r00*r00)))+(((3.59036254882813)*py*r00*(px*px*px*px*px)*(r01*r01*r01)))+(((3.59036254882813)*py*r01*(px*px*px*px*px)*(r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r01*r01*r01*r01)))+(((3.59036254882813)*(px*px*px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*r00*(px*px*px)*(py*py*py)*(r01*r01*r01)))+(((7.18072509765625)*r01*(px*px*px)*(py*py*py)*(r00*r00*r00)))+(((0.820239866455078)*px*r00*(py*py)*(r01*r01)))+(((0.820239866455078)*py*r01*(px*px)*(r00*r00)))+(((30.53064793396)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((0.0167977266064453)*px*py*r00*(r01*r01*r01)))+(((0.0167977266064453)*px*py*r01*(r00*r00*r00)))+(((10.0131621124268)*px*r00*r01*(py*py*py)))+(((10.0131621124268)*py*r00*r01*(px*px*px)))+(((11.9918109130859)*pz*r02*(px*px*px*px)*(r01*r01)))+(((11.9918109130859)*pz*r02*(py*py*py*py)*(r00*r00)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-7.18072509765625)*(px*px*px*px)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-7.18072509765625)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-5.38554382324219)*(px*px)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-5.38554382324219)*(px*px*px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.491161596679688)*px*r00*(py*py*py)*(r01*r01*r01)))+(((-0.491161596679688)*py*r01*(px*px*px)*(r00*r00*r00)))+(((-20.5174858215332)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-20.5174858215332)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.99590545654297)*px*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-5.99590545654297)*py*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(py*py)*(r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(pz*pz)*(r01*r01)))+(((-5.99590545654297)*r01*(px*px)*(py*py*py)*(r00*r00)))+(((-5.99590545654297)*r01*(py*py*py)*(pz*pz)*(r00*r00)))+(((-11.9918109130859)*px*r00*(py*py*py*py)*(r01*r01)))+(((-11.9918109130859)*py*r01*(px*px*px*px)*(r00*r00)))+(((3.59036254882813)*px*py*r00*(pz*pz*pz*pz)*(r01*r01*r01)))+(((3.59036254882813)*px*py*r01*(pz*pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*px*r02*(py*py)*(pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*py*r02*(px*px)*(pz*pz*pz)*(r01*r01*r01)))+(((7.18072509765625)*r00*r02*(px*px*px)*(pz*pz*pz)*(r01*r01)))+(((7.18072509765625)*r01*r02*(py*py*py)*(pz*pz*pz)*(r00*r00)))+(((21.5421752929688)*px*r01*(py*py*py)*(pz*pz)*(r00*r00*r00)))+(((21.5421752929688)*py*r00*(px*px*px)*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((0.491161596679688)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((0.491161596679688)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((0.491161596679688)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((0.491161596679688)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((11.9918109130859)*px*r00*(py*py)*(pz*pz)*(r01*r01)))+(((11.9918109130859)*py*r01*(px*px)*(pz*pz)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r01*r01)))+(((-7.18072509765625)*px*pz*r02*(py*py*py*py)*(r00*r00*r00)))+(((-7.18072509765625)*px*r00*(py*py*py)*(pz*pz)*(r01*r01*r01)))+(((-7.18072509765625)*py*pz*r02*(px*px*px*px)*(r01*r01*r01)))+(((-7.18072509765625)*py*r01*(px*px*px)*(pz*pz)*(r00*r00*r00)))+(((-7.18072509765625)*pz*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((-7.18072509765625)*pz*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((-7.18072509765625)*pz*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((-7.18072509765625)*pz*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-35.9036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*pz*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((7.18072509765625)*pz*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((14.3614501953125)*px*pz*r00*r02*(py*py*py*py)*(r01*r01)))+(((14.3614501953125)*px*r00*r01*(py*py*py)*(pz*pz)*(r02*r02)))+(((14.3614501953125)*py*pz*r01*r02*(px*px*px*px)*(r00*r00)))+(((14.3614501953125)*py*r00*r01*(px*px*px)*(pz*pz)*(r02*r02)))+(((-14.3614501953125)*px*r00*r02*(py*py)*(pz*pz*pz)*(r01*r01)))+(((-14.3614501953125)*py*r01*r02*(px*px)*(pz*pz*pz)*(r00*r00)))+(((-0.982323193359375)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-0.982323193359375)*py*pz*r01*r02*(px*px)*(r00*r00)))+(((-23.9836218261719)*px*pz*r00*r01*r02*(py*py*py)))+(((-23.9836218261719)*py*pz*r00*r01*r02*(px*px*px))))))))))+(((10.4928345489502)*r02*(px*px*px*px)*(r01*r01)))+(((10.4928345489502)*r02*(py*py*py*py)*(r00*r00)))+(((-6.28313446044922)*pz*(px*px*px*px)*(r01*r01*r01*r01)))+(((-6.28313446044922)*pz*(py*py*py*py)*(r00*r00*r00*r00)))+(((-6.28313446044922)*(px*px)*(pz*pz*pz)*(r01*r01*r01*r01)))+(((-6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00*r00*r00)))+(((-0.429766397094727)*pz*(px*px)*(r01*r01*r01*r01)))+(((-0.429766397094727)*pz*(py*py)*(r00*r00*r00*r00)))+(((6.28313446044922)*pz*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((6.28313446044922)*pz*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((6.28313446044922)*pz*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((6.28313446044922)*pz*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((10.4928345489502)*r02*(px*px)*(py*py)*(r00*r00)))+(((10.4928345489502)*r02*(px*px)*(py*py)*(r01*r01)))+(((0.429766397094727)*px*r02*(py*py)*(r00*r00*r00)))+(((0.429766397094727)*py*r02*(px*px)*(r01*r01*r01)))+(((0.429766397094727)*r00*r02*(px*px*px)*(r01*r01)))+(((0.429766397094727)*r01*r02*(py*py*py)*(r00*r00)))+(((-6.28313446044922)*px*r02*(py*py*py*py)*(r00*r00*r00)))+(((-6.28313446044922)*py*r02*(px*px*px*px)*(r01*r01*r01)))+(((-6.28313446044922)*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((-6.28313446044922)*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((-6.28313446044922)*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((-6.28313446044922)*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-6.28313446044922)*(px*px)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-12.5662689208984)*pz*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((-12.5662689208984)*pz*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((-10.4928345489502)*px*pz*(py*py)*(r00*r00*r00)))+(((-10.4928345489502)*py*pz*(px*px)*(r01*r01*r01)))+(((-10.4928345489502)*pz*r00*(px*px*px)*(r01*r01)))+(((-10.4928345489502)*pz*r01*(py*py*py)*(r00*r00)))+(((-0.429766397094727)*pz*(px*px)*(r00*r00)*(r01*r01)))+(((-0.429766397094727)*pz*(py*py)*(r00*r00)*(r01*r01)))+(((6.28313446044922)*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((6.28313446044922)*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((12.5662689208984)*px*py*r00*(pz*pz*pz)*(r01*r01*r01)))+(((12.5662689208984)*px*py*r01*(pz*pz*pz)*(r00*r00*r00)))+(((12.5662689208984)*px*r00*r02*(py*py*py*py)*(r01*r01)))+(((12.5662689208984)*py*r01*r02*(px*px*px*px)*(r00*r00)))+(((18.8494033813477)*px*r02*(py*py)*(pz*pz)*(r00*r00*r00)))+(((18.8494033813477)*py*r02*(px*px)*(pz*pz)*(r01*r01*r01)))+(((18.8494033813477)*r00*r02*(px*px*px)*(pz*pz)*(r01*r01)))+(((18.8494033813477)*r01*r02*(py*py*py)*(pz*pz)*(r00*r00)))+(((37.6988067626953)*px*pz*r01*(py*py*py)*(r00*r00*r00)))+(((37.6988067626953)*py*pz*r00*(px*px*px)*(r01*r01*r01)))+(((20.9856690979004)*px*pz*r00*(py*py)*(r01*r01)))+(((20.9856690979004)*py*pz*r01*(px*px)*(r00*r00)))+(((0.859532794189453)*px*py*pz*r00*(r01*r01*r01)))+(((0.859532794189453)*px*py*pz*r01*(r00*r00*r00)))+(((-12.5662689208984)*px*pz*r00*(py*py*py)*(r01*r01*r01)))+(((-12.5662689208984)*py*pz*r01*(px*px*px)*(r00*r00*r00)))+(((-12.5662689208984)*pz*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((-12.5662689208984)*pz*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((-62.8313446044922)*pz*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-20.9856690979004)*px*r00*r01*r02*(py*py*py)))+(((-20.9856690979004)*py*r00*r01*r02*(px*px*px)))+(((-0.859532794189453)*px*r00*r02*(py*py)*(r01*r01)))+(((-0.859532794189453)*py*r01*r02*(px*px)*(r00*r00)))+(((25.1325378417969)*px*pz*r00*r01*(py*py*py)*(r02*r02)))+(((25.1325378417969)*py*pz*r00*r01*(px*px*px)*(r02*r02)))+(((-37.6988067626953)*px*r00*r02*(py*py)*(pz*pz)*(r01*r01)))+(((-37.6988067626953)*py*r01*r02*(px*px)*(pz*pz)*(r00*r00))))));
CheckValue<IkReal> x44=IKPowWithIntegerCheck(((((-5.49774265289307)*(px*px*px*px)*(r01*r01*r01*r01)))+(((-5.49774265289307)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-5.49774265289307)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-5.49774265289307)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((-5.49774265289307)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-5.49774265289307)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*px*r01*(py*py*py)*(r00*r00*r00)))+(((21.9909706115723)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.49774265289307)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((-5.49774265289307)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((-5.49774265289307)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-5.49774265289307)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-32.9864559173584)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((10.9954853057861)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((10.9954853057861)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((10.9954853057861)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((10.9954853057861)*px*r00*r01*(py*py*py)*(r02*r02)))+(((10.9954853057861)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((10.9954853057861)*py*r00*r01*(px*px*px)*(r02*r02)))+(((10.9954853057861)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((10.9954853057861)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((-21.9909706115723)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-21.9909706115723)*py*pz*r01*r02*(px*px)*(r00*r00)))),-1);
if(!x44.valid){
continue;
}
IkReal x45=((((6.28313446044922)*pz*(px*px*px*px)*(r01*r01*r01*r01)))+(((6.28313446044922)*pz*(py*py*py*py)*(r00*r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r01*r01*r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00*r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r01*r01*r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00*r00*r00)))+(((-10.4928345489502)*r02*(px*px*px*px)*(r01*r01)))+(((-10.4928345489502)*r02*(py*py*py*py)*(r00*r00)))+(((6.28313446044922)*px*r02*(py*py*py*py)*(r00*r00*r00)))+(((6.28313446044922)*py*r02*(px*px*px*px)*(r01*r01*r01)))+(((6.28313446044922)*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((6.28313446044922)*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((6.28313446044922)*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((6.28313446044922)*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((12.5662689208984)*pz*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((12.5662689208984)*pz*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((10.4928345489502)*px*pz*(py*py)*(r00*r00*r00)))+(((10.4928345489502)*py*pz*(px*px)*(r01*r01*r01)))+(((10.4928345489502)*pz*r00*(px*px*px)*(r01*r01)))+(((10.4928345489502)*pz*r01*(py*py*py)*(r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r00*r00)*(r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((-6.28313446044922)*pz*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r00*r00)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r01*r01)))+(((-0.429766397094727)*px*r02*(py*py)*(r00*r00*r00)))+(((-0.429766397094727)*py*r02*(px*px)*(r01*r01*r01)))+(((-0.429766397094727)*r00*r02*(px*px*px)*(r01*r01)))+(((-0.429766397094727)*r01*r02*(py*py*py)*(r00*r00)))+(((12.5662689208984)*px*pz*r00*(py*py*py)*(r01*r01*r01)))+(((12.5662689208984)*py*pz*r01*(px*px*px)*(r00*r00*r00)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((62.8313446044922)*pz*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((20.9856690979004)*px*r00*r01*r02*(py*py*py)))+(((20.9856690979004)*py*r00*r01*r02*(px*px*px)))+(((0.859532794189453)*px*r00*r02*(py*py)*(r01*r01)))+(((0.859532794189453)*py*r01*r02*(px*px)*(r00*r00)))+(((-6.28313446044922)*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((-6.28313446044922)*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((-12.5662689208984)*px*py*r00*(pz*pz*pz)*(r01*r01*r01)))+(((-12.5662689208984)*px*py*r01*(pz*pz*pz)*(r00*r00*r00)))+(((-12.5662689208984)*px*r00*r02*(py*py*py*py)*(r01*r01)))+(((-12.5662689208984)*py*r01*r02*(px*px*px*px)*(r00*r00)))+(((-18.8494033813477)*px*r02*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-18.8494033813477)*py*r02*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-18.8494033813477)*r00*r02*(px*px*px)*(pz*pz)*(r01*r01)))+(((-18.8494033813477)*r01*r02*(py*py*py)*(pz*pz)*(r00*r00)))+(((-37.6988067626953)*px*pz*r01*(py*py*py)*(r00*r00*r00)))+(((-37.6988067626953)*py*pz*r00*(px*px*px)*(r01*r01*r01)))+(((-20.9856690979004)*px*pz*r00*(py*py)*(r01*r01)))+(((-20.9856690979004)*py*pz*r01*(px*px)*(r00*r00)))+(((-0.859532794189453)*px*py*pz*r00*(r01*r01*r01)))+(((-0.859532794189453)*px*py*pz*r01*(r00*r00*r00)))+(((37.6988067626953)*px*r00*r02*(py*py)*(pz*pz)*(r01*r01)))+(((37.6988067626953)*py*r01*r02*(px*px)*(pz*pz)*(r00*r00)))+(((-25.1325378417969)*px*pz*r00*r01*(py*py*py)*(r02*r02)))+(((-25.1325378417969)*py*pz*r00*r01*(px*px*px)*(r02*r02))));
if((((x45*x45)+(((((((21.9909706115723)*(px*px*px*px)*(r01*r01*r01*r01)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00*r00*r00)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((21.9909706115723)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((131.945823669434)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-87.9638824462891)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-87.9638824462891)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((-43.9819412231445)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((-43.9819412231445)*px*r00*r01*(py*py*py)*(r02*r02)))+(((-43.9819412231445)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((-43.9819412231445)*py*r00*r01*(px*px*px)*(r02*r02)))+(((-43.9819412231445)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((-43.9819412231445)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((87.9638824462891)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((87.9638824462891)*py*pz*r01*r02*(px*px)*(r00*r00)))))*(((((5.25216185455322)*(px*px*px*px)*(r01*r01*r01*r01)))+(((5.25216185455322)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r01*r01*r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00*r00*r00)))+(((-5.00658105621338)*(px*px*px*px)*(r01*r01)))+(((-5.00658105621338)*(py*py*py*py)*(r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((0.245580798339844)*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((0.245580798339844)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((5.99590545654297)*px*(py*py*py*py)*(r00*r00*r00)))+(((5.99590545654297)*py*(px*px*px*px)*(r01*r01*r01)))+(((5.99590545654297)*r00*(px*px*px*px*px)*(r01*r01)))+(((5.99590545654297)*r01*(py*py*py*py*py)*(r00*r00)))+(((5.99590545654297)*(px*px)*(py*py*py)*(r01*r01*r01)))+(((5.99590545654297)*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-1.79518127441406)*(px*px)*(py*py*py*py)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px*px*px)*(py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00)*(r01*r01)))+(((-3.59036254882813)*(px*px)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-3.59036254882813)*(px*px*px*px)*(py*py)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(px*px*px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.410119933227539)*px*(py*py)*(r00*r00*r00)))+(((-0.410119933227539)*py*(px*px)*(r01*r01*r01)))+(((-0.410119933227539)*r00*(px*px*px)*(r01*r01)))+(((-0.410119933227539)*r01*(py*py*py)*(r00*r00)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r00*r00)*(r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00)*(r01*r01)))+(((-5.00658105621338)*(px*px)*(py*py)*(r00*r00)))+(((-5.00658105621338)*(px*px)*(py*py)*(r01*r01)))+(((3.59036254882813)*px*r00*(py*py*py*py*py)*(r01*r01*r01)))+(((3.59036254882813)*px*r01*(py*py*py*py*py)*(r00*r00*r00)))+(((3.59036254882813)*py*r00*(px*px*px*px*px)*(r01*r01*r01)))+(((3.59036254882813)*py*r01*(px*px*px*px*px)*(r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r01*r01*r01*r01)))+(((3.59036254882813)*(px*px*px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*r00*(px*px*px)*(py*py*py)*(r01*r01*r01)))+(((7.18072509765625)*r01*(px*px*px)*(py*py*py)*(r00*r00*r00)))+(((0.820239866455078)*px*r00*(py*py)*(r01*r01)))+(((0.820239866455078)*py*r01*(px*px)*(r00*r00)))+(((30.53064793396)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((0.0167977266064453)*px*py*r00*(r01*r01*r01)))+(((0.0167977266064453)*px*py*r01*(r00*r00*r00)))+(((10.0131621124268)*px*r00*r01*(py*py*py)))+(((10.0131621124268)*py*r00*r01*(px*px*px)))+(((11.9918109130859)*pz*r02*(px*px*px*px)*(r01*r01)))+(((11.9918109130859)*pz*r02*(py*py*py*py)*(r00*r00)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-7.18072509765625)*(px*px*px*px)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-7.18072509765625)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-5.38554382324219)*(px*px)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-5.38554382324219)*(px*px*px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.491161596679688)*px*r00*(py*py*py)*(r01*r01*r01)))+(((-0.491161596679688)*py*r01*(px*px*px)*(r00*r00*r00)))+(((-20.5174858215332)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-20.5174858215332)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.99590545654297)*px*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-5.99590545654297)*py*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(py*py)*(r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(pz*pz)*(r01*r01)))+(((-5.99590545654297)*r01*(px*px)*(py*py*py)*(r00*r00)))+(((-5.99590545654297)*r01*(py*py*py)*(pz*pz)*(r00*r00)))+(((-11.9918109130859)*px*r00*(py*py*py*py)*(r01*r01)))+(((-11.9918109130859)*py*r01*(px*px*px*px)*(r00*r00)))+(((3.59036254882813)*px*py*r00*(pz*pz*pz*pz)*(r01*r01*r01)))+(((3.59036254882813)*px*py*r01*(pz*pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*px*r02*(py*py)*(pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*py*r02*(px*px)*(pz*pz*pz)*(r01*r01*r01)))+(((7.18072509765625)*r00*r02*(px*px*px)*(pz*pz*pz)*(r01*r01)))+(((7.18072509765625)*r01*r02*(py*py*py)*(pz*pz*pz)*(r00*r00)))+(((21.5421752929688)*px*r01*(py*py*py)*(pz*pz)*(r00*r00*r00)))+(((21.5421752929688)*py*r00*(px*px*px)*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((0.491161596679688)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((0.491161596679688)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((0.491161596679688)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((0.491161596679688)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((11.9918109130859)*px*r00*(py*py)*(pz*pz)*(r01*r01)))+(((11.9918109130859)*py*r01*(px*px)*(pz*pz)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r01*r01)))+(((-7.18072509765625)*px*pz*r02*(py*py*py*py)*(r00*r00*r00)))+(((-7.18072509765625)*px*r00*(py*py*py)*(pz*pz)*(r01*r01*r01)))+(((-7.18072509765625)*py*pz*r02*(px*px*px*px)*(r01*r01*r01)))+(((-7.18072509765625)*py*r01*(px*px*px)*(pz*pz)*(r00*r00*r00)))+(((-7.18072509765625)*pz*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((-7.18072509765625)*pz*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((-7.18072509765625)*pz*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((-7.18072509765625)*pz*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-35.9036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*pz*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((7.18072509765625)*pz*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((14.3614501953125)*px*pz*r00*r02*(py*py*py*py)*(r01*r01)))+(((14.3614501953125)*px*r00*r01*(py*py*py)*(pz*pz)*(r02*r02)))+(((14.3614501953125)*py*pz*r01*r02*(px*px*px*px)*(r00*r00)))+(((14.3614501953125)*py*r00*r01*(px*px*px)*(pz*pz)*(r02*r02)))+(((-14.3614501953125)*px*r00*r02*(py*py)*(pz*pz*pz)*(r01*r01)))+(((-14.3614501953125)*py*r01*r02*(px*px)*(pz*pz*pz)*(r00*r00)))+(((-0.982323193359375)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-0.982323193359375)*py*pz*r01*r02*(px*px)*(r00*r00)))+(((-23.9836218261719)*px*pz*r00*r01*r02*(py*py*py)))+(((-23.9836218261719)*py*pz*r00*r01*r02*(px*px*px))))))))) < -0.00001)
continue;
cj1array[2]=((-0.5)*(x44.value)*(((IKsqrt(((x45*x45)+(((((((21.9909706115723)*(px*px*px*px)*(r01*r01*r01*r01)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00*r00*r00)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((21.9909706115723)*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((21.9909706115723)*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((21.9909706115723)*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((21.9909706115723)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((21.9909706115723)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((131.945823669434)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-87.9638824462891)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-87.9638824462891)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((-43.9819412231445)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((-43.9819412231445)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((-43.9819412231445)*px*r00*r01*(py*py*py)*(r02*r02)))+(((-43.9819412231445)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((-43.9819412231445)*py*r00*r01*(px*px*px)*(r02*r02)))+(((-43.9819412231445)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((-43.9819412231445)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((87.9638824462891)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((87.9638824462891)*py*pz*r01*r02*(px*px)*(r00*r00)))))*(((((5.25216185455322)*(px*px*px*px)*(r01*r01*r01*r01)))+(((5.25216185455322)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r01*r01*r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00*r00*r00)))+(((-5.00658105621338)*(px*px*px*px)*(r01*r01)))+(((-5.00658105621338)*(py*py*py*py)*(r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((0.245580798339844)*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((0.245580798339844)*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((0.245580798339844)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((5.99590545654297)*px*(py*py*py*py)*(r00*r00*r00)))+(((5.99590545654297)*py*(px*px*px*px)*(r01*r01*r01)))+(((5.99590545654297)*r00*(px*px*px*px*px)*(r01*r01)))+(((5.99590545654297)*r01*(py*py*py*py*py)*(r00*r00)))+(((5.99590545654297)*(px*px)*(py*py*py)*(r01*r01*r01)))+(((5.99590545654297)*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-1.79518127441406)*(px*px)*(py*py*py*py)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r01*r01*r01*r01)))+(((-1.79518127441406)*(px*px*px*px)*(py*py)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(px*px*px*px*px*px)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00*r00*r00)))+(((-1.79518127441406)*(py*py*py*py*py*py)*(r00*r00)*(r01*r01)))+(((-3.59036254882813)*(px*px)*(py*py*py*py)*(r00*r00*r00*r00)))+(((-3.59036254882813)*(px*px*px*px)*(py*py)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(px*px*px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.410119933227539)*px*(py*py)*(r00*r00*r00)))+(((-0.410119933227539)*py*(px*px)*(r01*r01*r01)))+(((-0.410119933227539)*r00*(px*px*px)*(r01*r01)))+(((-0.410119933227539)*r01*(py*py*py)*(r00*r00)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r01*r01*r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((-0.00839886330322266)*(px*px)*(r00*r00)*(r01*r01)))+(((-0.00839886330322266)*(py*py)*(r00*r00)*(r01*r01)))+(((-5.00658105621338)*(px*px)*(py*py)*(r00*r00)))+(((-5.00658105621338)*(px*px)*(py*py)*(r01*r01)))+(((3.59036254882813)*px*r00*(py*py*py*py*py)*(r01*r01*r01)))+(((3.59036254882813)*px*r01*(py*py*py*py*py)*(r00*r00*r00)))+(((3.59036254882813)*py*r00*(px*px*px*px*px)*(r01*r01*r01)))+(((3.59036254882813)*py*r01*(px*px*px*px*px)*(r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00*r00*r00)))+(((3.59036254882813)*(px*px)*(py*py)*(pz*pz)*(r01*r01*r01*r01)))+(((3.59036254882813)*(px*px*px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((3.59036254882813)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*r00*(px*px*px)*(py*py*py)*(r01*r01*r01)))+(((7.18072509765625)*r01*(px*px*px)*(py*py*py)*(r00*r00*r00)))+(((0.820239866455078)*px*r00*(py*py)*(r01*r01)))+(((0.820239866455078)*py*r01*(px*px)*(r00*r00)))+(((30.53064793396)*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((0.0167977266064453)*px*py*r00*(r01*r01*r01)))+(((0.0167977266064453)*px*py*r01*(r00*r00*r00)))+(((10.0131621124268)*px*r00*r01*(py*py*py)))+(((10.0131621124268)*py*r00*r01*(px*px*px)))+(((11.9918109130859)*pz*r02*(px*px*px*px)*(r01*r01)))+(((11.9918109130859)*pz*r02*(py*py*py*py)*(r00*r00)))+(((-1.79518127441406)*(px*px)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-1.79518127441406)*(py*py)*(pz*pz*pz*pz)*(r00*r00)*(r01*r01)))+(((-7.18072509765625)*(px*px*px*px)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-7.18072509765625)*(py*py*py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-5.38554382324219)*(px*px)*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-5.38554382324219)*(px*px*px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(px*px)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.245580798339844)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((-0.491161596679688)*px*r00*(py*py*py)*(r01*r01*r01)))+(((-0.491161596679688)*py*r01*(px*px*px)*(r00*r00*r00)))+(((-20.5174858215332)*px*r01*(py*py*py)*(r00*r00*r00)))+(((-20.5174858215332)*py*r00*(px*px*px)*(r01*r01*r01)))+(((-5.99590545654297)*px*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-5.99590545654297)*py*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(py*py)*(r01*r01)))+(((-5.99590545654297)*r00*(px*px*px)*(pz*pz)*(r01*r01)))+(((-5.99590545654297)*r01*(px*px)*(py*py*py)*(r00*r00)))+(((-5.99590545654297)*r01*(py*py*py)*(pz*pz)*(r00*r00)))+(((-11.9918109130859)*px*r00*(py*py*py*py)*(r01*r01)))+(((-11.9918109130859)*py*r01*(px*px*px*px)*(r00*r00)))+(((3.59036254882813)*px*py*r00*(pz*pz*pz*pz)*(r01*r01*r01)))+(((3.59036254882813)*px*py*r01*(pz*pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*px*r02*(py*py)*(pz*pz*pz)*(r00*r00*r00)))+(((7.18072509765625)*py*r02*(px*px)*(pz*pz*pz)*(r01*r01*r01)))+(((7.18072509765625)*r00*r02*(px*px*px)*(pz*pz*pz)*(r01*r01)))+(((7.18072509765625)*r01*r02*(py*py*py)*(pz*pz*pz)*(r00*r00)))+(((21.5421752929688)*px*r01*(py*py*py)*(pz*pz)*(r00*r00*r00)))+(((21.5421752929688)*py*r00*(px*px*px)*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r00*(pz*pz)*(r01*r01*r01)))+(((0.491161596679688)*px*py*r01*(pz*pz)*(r00*r00*r00)))+(((0.491161596679688)*px*pz*r02*(py*py)*(r00*r00*r00)))+(((0.491161596679688)*py*pz*r02*(px*px)*(r01*r01*r01)))+(((0.491161596679688)*pz*r00*r02*(px*px*px)*(r01*r01)))+(((0.491161596679688)*pz*r01*r02*(py*py*py)*(r00*r00)))+(((11.9918109130859)*px*r00*(py*py)*(pz*pz)*(r01*r01)))+(((11.9918109130859)*py*r01*(px*px)*(pz*pz)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r00*r00)))+(((11.9918109130859)*pz*r02*(px*px)*(py*py)*(r01*r01)))+(((-7.18072509765625)*px*pz*r02*(py*py*py*py)*(r00*r00*r00)))+(((-7.18072509765625)*px*r00*(py*py*py)*(pz*pz)*(r01*r01*r01)))+(((-7.18072509765625)*py*pz*r02*(px*px*px*px)*(r01*r01*r01)))+(((-7.18072509765625)*py*r01*(px*px*px)*(pz*pz)*(r00*r00*r00)))+(((-7.18072509765625)*pz*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((-7.18072509765625)*pz*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((-7.18072509765625)*pz*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((-7.18072509765625)*pz*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r02*r02)))+(((-7.18072509765625)*(px*px)*(py*py)*(pz*pz)*(r01*r01)*(r02*r02)))+(((-35.9036254882813)*(px*px)*(py*py)*(pz*pz)*(r00*r00)*(r01*r01)))+(((7.18072509765625)*pz*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((7.18072509765625)*pz*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((14.3614501953125)*px*pz*r00*r02*(py*py*py*py)*(r01*r01)))+(((14.3614501953125)*px*r00*r01*(py*py*py)*(pz*pz)*(r02*r02)))+(((14.3614501953125)*py*pz*r01*r02*(px*px*px*px)*(r00*r00)))+(((14.3614501953125)*py*r00*r01*(px*px*px)*(pz*pz)*(r02*r02)))+(((-14.3614501953125)*px*r00*r02*(py*py)*(pz*pz*pz)*(r01*r01)))+(((-14.3614501953125)*py*r01*r02*(px*px)*(pz*pz*pz)*(r00*r00)))+(((-0.982323193359375)*px*pz*r00*r02*(py*py)*(r01*r01)))+(((-0.982323193359375)*py*pz*r01*r02*(px*px)*(r00*r00)))+(((-23.9836218261719)*px*pz*r00*r01*r02*(py*py*py)))+(((-23.9836218261719)*py*pz*r00*r01*r02*(px*px*px))))))))))+(((6.28313446044922)*pz*(px*px*px*px)*(r01*r01*r01*r01)))+(((6.28313446044922)*pz*(py*py*py*py)*(r00*r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r01*r01*r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00*r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r01*r01*r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00*r00*r00)))+(((-10.4928345489502)*r02*(px*px*px*px)*(r01*r01)))+(((-10.4928345489502)*r02*(py*py*py*py)*(r00*r00)))+(((6.28313446044922)*px*r02*(py*py*py*py)*(r00*r00*r00)))+(((6.28313446044922)*py*r02*(px*px*px*px)*(r01*r01*r01)))+(((6.28313446044922)*r00*r02*(px*px*px*px*px)*(r01*r01)))+(((6.28313446044922)*r01*r02*(py*py*py*py*py)*(r00*r00)))+(((6.28313446044922)*r02*(px*px)*(py*py*py)*(r01*r01*r01)))+(((6.28313446044922)*r02*(px*px*px)*(py*py)*(r00*r00*r00)))+(((6.28313446044922)*(px*px)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((6.28313446044922)*(py*py)*(pz*pz*pz)*(r00*r00)*(r01*r01)))+(((12.5662689208984)*pz*(px*px*px*px)*(r01*r01)*(r02*r02)))+(((12.5662689208984)*pz*(py*py*py*py)*(r00*r00)*(r02*r02)))+(((10.4928345489502)*px*pz*(py*py)*(r00*r00*r00)))+(((10.4928345489502)*py*pz*(px*px)*(r01*r01*r01)))+(((10.4928345489502)*pz*r00*(px*px*px)*(r01*r01)))+(((10.4928345489502)*pz*r01*(py*py*py)*(r00*r00)))+(((0.429766397094727)*pz*(px*px)*(r00*r00)*(r01*r01)))+(((0.429766397094727)*pz*(py*py)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r00*r00*r00*r00)))+(((-6.28313446044922)*pz*(px*px)*(py*py)*(r01*r01*r01*r01)))+(((-6.28313446044922)*pz*(px*px*px*px)*(r00*r00)*(r01*r01)))+(((-6.28313446044922)*pz*(py*py*py*py)*(r00*r00)*(r01*r01)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r00*r00)))+(((-10.4928345489502)*r02*(px*px)*(py*py)*(r01*r01)))+(((-0.429766397094727)*px*r02*(py*py)*(r00*r00*r00)))+(((-0.429766397094727)*py*r02*(px*px)*(r01*r01*r01)))+(((-0.429766397094727)*r00*r02*(px*px*px)*(r01*r01)))+(((-0.429766397094727)*r01*r02*(py*py*py)*(r00*r00)))+(((12.5662689208984)*px*pz*r00*(py*py*py)*(r01*r01*r01)))+(((12.5662689208984)*py*pz*r01*(px*px*px)*(r00*r00*r00)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r00*r00)*(r02*r02)))+(((12.5662689208984)*pz*(px*px)*(py*py)*(r01*r01)*(r02*r02)))+(((62.8313446044922)*pz*(px*px)*(py*py)*(r00*r00)*(r01*r01)))+(((20.9856690979004)*px*r00*r01*r02*(py*py*py)))+(((20.9856690979004)*py*r00*r01*r02*(px*px*px)))+(((0.859532794189453)*px*r00*r02*(py*py)*(r01*r01)))+(((0.859532794189453)*py*r01*r02*(px*px)*(r00*r00)))+(((-6.28313446044922)*r00*r02*(px*px*px)*(py*py)*(r01*r01)))+(((-6.28313446044922)*r01*r02*(px*px)*(py*py*py)*(r00*r00)))+(((-12.5662689208984)*px*py*r00*(pz*pz*pz)*(r01*r01*r01)))+(((-12.5662689208984)*px*py*r01*(pz*pz*pz)*(r00*r00*r00)))+(((-12.5662689208984)*px*r00*r02*(py*py*py*py)*(r01*r01)))+(((-12.5662689208984)*py*r01*r02*(px*px*px*px)*(r00*r00)))+(((-18.8494033813477)*px*r02*(py*py)*(pz*pz)*(r00*r00*r00)))+(((-18.8494033813477)*py*r02*(px*px)*(pz*pz)*(r01*r01*r01)))+(((-18.8494033813477)*r00*r02*(px*px*px)*(pz*pz)*(r01*r01)))+(((-18.8494033813477)*r01*r02*(py*py*py)*(pz*pz)*(r00*r00)))+(((-37.6988067626953)*px*pz*r01*(py*py*py)*(r00*r00*r00)))+(((-37.6988067626953)*py*pz*r00*(px*px*px)*(r01*r01*r01)))+(((-20.9856690979004)*px*pz*r00*(py*py)*(r01*r01)))+(((-20.9856690979004)*py*pz*r01*(px*px)*(r00*r00)))+(((-0.859532794189453)*px*py*pz*r00*(r01*r01*r01)))+(((-0.859532794189453)*px*py*pz*r01*(r00*r00*r00)))+(((37.6988067626953)*px*r00*r02*(py*py)*(pz*pz)*(r01*r01)))+(((37.6988067626953)*py*r01*r02*(px*px)*(pz*pz)*(r00*r00)))+(((-25.1325378417969)*px*pz*r00*r01*(py*py*py)*(r02*r02)))+(((-25.1325378417969)*py*pz*r00*r01*(px*px*px)*(r02*r02))))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( cj1array[2] >= -1-IKFAST_SINCOS_THRESH && cj1array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[2] = j1valid[3] = true;
    j1array[2] = IKacos(cj1array[2]);
    sj1array[2] = IKsin(j1array[2]);
    cj1array[3] = cj1array[2];
    j1array[3] = -j1array[2];
    sj1array[3] = -sj1array[2];
}
else if( isnan(cj1array[2]) )
{
    // probably any value will work
    j1valid[2] = true;
    cj1array[2] = 1; sj1array[2] = 0; j1array[2] = 0;
}
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x46=(px*r01*sj1);
IkReal x47=(py*r00*sj1);
j0eval[0]=(x46+(((-1.0)*x47)));
j0eval[1]=IKsign(((((7.0)*x46))+(((-7.0)*x47))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x48=(py*r00);
IkReal x49=(px*r01);
IkReal x50=cj1*cj1;
IkReal x51=(x48+(((-1.0)*x49))+((x49*x50))+(((-1.0)*x48*x50)));
j0eval[0]=x51;
j0eval[1]=IKsign(x51);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x52=(r02*(px*px));
IkReal x53=(r02*(py*py));
IkReal x54=((1.0)*pz);
IkReal x55=(px*r00);
IkReal x56=(py*r01);
IkReal x57=cj1*cj1;
IkReal x58=(pz*x57);
IkReal x59=((1.0)*x57);
IkReal x60=(x52+x53+((x55*x58))+((x56*x58))+(((-1.0)*x52*x59))+(((-1.0)*x53*x59))+(((-1.0)*x54*x55))+(((-1.0)*x54*x56)));
j0eval[0]=x60;
j0eval[1]=IKsign(x60);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x61=r02*r02;
IkReal x62=((7.0)*sj1);
IkReal x63=((175.0)*cj1*r02);
IkReal x64=((200.0)*pz*r02);
j0eval[0]=(sj1+(((-1.0)*sj1*x61)));
j0eval[1]=IKsign((x62+(((-1.0)*x61*x62))));
j0eval[2]=((IKabs(((((167.0)*r00))+((r00*x63))+(((-1.0)*r00*x64)))))+(IKabs(((((167.0)*r01))+((r01*x63))+(((-1.0)*r01*x64))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x65=r02*r02;
IkReal x66=((167.0)*sj1);
IkReal x67=((200.0)*cj1*pz);
IkReal x68=((167.0)*cj1*r02);
j0eval[0]=(sj1+(((-1.0)*sj1*x65)));
j0eval[1]=IKsign((x66+(((-1.0)*x65*x66))));
j0eval[2]=((IKabs(((((175.0)*r00))+((r00*x68))+(((-1.0)*r00*x67)))))+(IKabs(((((175.0)*r01))+((r01*x68))+(((-1.0)*r01*x67))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
px=0;
py=0;
pp=pz*pz;
IkReal x69=(sj1*(pz*pz));
IkReal x70=((14.6198830409357)*x69);
IkReal x71=r02*r02;
IkReal x72=((0.0684)*sj1);
IkReal x73=((18285625.0)*pz*r02);
CheckValue<IkReal> x76=IKPowWithIntegerCheck(pz,-1);
if(!x76.valid){
continue;
}
IkReal x74=((29241.0)*r02*(x76.value));
IkReal x75=((6250000.0)*r02*(pz*pz*pz));
j0eval[0]=(sj1+(((-1.0)*x70))+((x70*x71))+(((-1.0)*sj1*x71)));
j0eval[1]=IKsign((x72+(((-1.0)*x69))+((x69*x71))+(((-1.0)*x71*x72))));
j0eval[2]=((IKabs((((r00*x74))+((r00*x75))+(((-1.0)*r00*x73)))))+(IKabs((((r01*x74))+((r01*x75))+(((-1.0)*r01*x73))))));
j0eval[3]=pz;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x77=((0.0684)*sj1);
IkReal x78=(sj1*(pz*pz));
IkReal x79=((1.67182857142857)*pz*r02);
CheckValue<IkReal> x82=IKPowWithIntegerCheck(pz,-1);
if(!x82.valid){
continue;
}
IkReal x80=((0.00267346285714286)*r02*(x82.value));
IkReal x81=((0.571428571428571)*r02*(pz*pz*pz));
CheckValue<IkReal> x83=IKPowWithIntegerCheck(IKsign((x77+(((-1.0)*x78))+(((r02*r02)*((x78+(((-1.0)*x77)))))))),-1);
if(!x83.valid){
continue;
}
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal((((r01*x79))+(((-1.0)*r01*x80))+(((-1.0)*r01*x81)))),IkReal((((r00*x79))+(((-1.0)*r00*x80))+(((-1.0)*r00*x81)))),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x83.value)))+(x84.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x85=IKsin(j0);
IkReal x86=((1.0)*pz);
IkReal x87=IKcos(j0);
IkReal x88=(pz*r02);
IkReal x89=(cj1*r02);
IkReal x90=(r00*sj1*x87);
IkReal x91=(r01*sj1*x85);
IkReal x92=((1.0)*(pz*pz));
evalcond[0]=(((pz*r00*sj1*x85))+(((-1.0)*r01*sj1*x86*x87)));
evalcond[1]=((-0.835)+x88+(((-0.875)*x89))+(((-0.875)*x90))+(((-0.875)*x91)));
evalcond[2]=((0.875)+(((0.835)*x89))+(((0.835)*x90))+(((0.835)*x91))+(((-1.0)*cj1*x86)));
CheckValue<IkReal> x93=IKPowWithIntegerCheck(pz,-1);
if(!x93.valid){
continue;
}
evalcond[3]=((((0.0684)*x90))+(((0.0684)*x91))+(((-1.67182857142857)*x88))+(((-1.0)*x90*x92))+(((-1.0)*x91*x92))+(((0.571428571428571)*r02*(pz*pz*pz)))+(((0.00267346285714286)*r02*(x93.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x273=((167.0)*sj1);
IkReal x274=((200.0)*cj1*pz);
IkReal x275=((167.0)*cj1*r02);
CheckValue<IkReal> x276=IKPowWithIntegerCheck(IKsign((x273+(((-1.0)*x273*(r02*r02))))),-1);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal((((r01*x274))+(((-1.0)*(175.0)*r01))+(((-1.0)*r01*x275)))),IkReal((((r00*x274))+(((-1.0)*(175.0)*r00))+(((-1.0)*r00*x275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x276.value)))+(x277.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x278=IKsin(j0);
IkReal x279=((1.0)*pz);
IkReal x280=IKcos(j0);
IkReal x281=(pz*r02);
IkReal x282=(cj1*r02);
IkReal x283=(r00*sj1*x280);
IkReal x284=(r01*sj1*x278);
IkReal x285=((1.0)*(pz*pz));
evalcond[0]=(((pz*r00*sj1*x278))+(((-1.0)*r01*sj1*x279*x280)));
evalcond[1]=((-0.835)+x281+(((-0.875)*x282))+(((-0.875)*x283))+(((-0.875)*x284)));
evalcond[2]=((0.875)+(((0.835)*x282))+(((0.835)*x283))+(((0.835)*x284))+(((-1.0)*cj1*x279)));
CheckValue<IkReal> x286=IKPowWithIntegerCheck(pz,-1);
if(!x286.valid){
continue;
}
evalcond[3]=((((0.0684)*x283))+(((0.0684)*x284))+(((-1.67182857142857)*x281))+(((-1.0)*x283*x285))+(((-1.0)*x284*x285))+(((0.571428571428571)*r02*(pz*pz*pz)))+(((0.00267346285714286)*r02*(x286.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x287=((7.0)*sj1);
IkReal x288=((7.0)*cj1*r02);
IkReal x289=((8.0)*pz*r02);
CheckValue<IkReal> x290=IKPowWithIntegerCheck(IKsign((x287+(((-1.0)*x287*(r02*r02))))),-1);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal((((r01*x289))+(((-1.0)*(6.68)*r01))+(((-1.0)*r01*x288)))),IkReal((((r00*x289))+(((-1.0)*(6.68)*r00))+(((-1.0)*r00*x288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x290.value)))+(x291.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x292=IKsin(j0);
IkReal x293=((1.0)*pz);
IkReal x294=IKcos(j0);
IkReal x295=(pz*r02);
IkReal x296=(cj1*r02);
IkReal x297=(r00*sj1*x294);
IkReal x298=(r01*sj1*x292);
IkReal x299=((1.0)*(pz*pz));
evalcond[0]=(((pz*r00*sj1*x292))+(((-1.0)*r01*sj1*x293*x294)));
evalcond[1]=((-0.835)+x295+(((-0.875)*x296))+(((-0.875)*x297))+(((-0.875)*x298)));
evalcond[2]=((0.875)+(((0.835)*x296))+(((0.835)*x297))+(((0.835)*x298))+(((-1.0)*cj1*x293)));
CheckValue<IkReal> x300=IKPowWithIntegerCheck(pz,-1);
if(!x300.valid){
continue;
}
evalcond[3]=((((0.0684)*x297))+(((0.0684)*x298))+(((-1.67182857142857)*x295))+(((-1.0)*x297*x299))+(((-1.0)*x298*x299))+(((0.571428571428571)*r02*(pz*pz*pz)))+(((0.00267346285714286)*r02*(x300.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x301=px*px;
IkReal x302=(r02*x301);
IkReal x303=py*py;
IkReal x304=(r02*x303);
IkReal x305=((1.0)*pz);
IkReal x306=(px*r00);
IkReal x307=(py*r01);
IkReal x308=cj1*cj1;
IkReal x309=(pz*x308);
IkReal x310=((1.0)*x308);
IkReal x311=((0.0390857142857143)*r02*sj1);
IkReal x312=((0.0390857142857143)*pz*sj1);
IkReal x313=((0.571428571428571)*r02*sj1);
IkReal x314=((0.571428571428571)*sj1*(pz*pz*pz));
IkReal x315=(cj1*r01*sj1);
IkReal x316=pz*pz;
IkReal x317=((1.0)*cj1*sj1);
IkReal x318=((1.0)*cj1*pz*r02*sj1);
IkReal x319=((0.571428571428571)*sj1);
IkReal x320=((0.571428571428571)*pz*sj1*x301);
IkReal x321=((0.571428571428571)*r02*sj1*x316);
IkReal x322=((0.571428571428571)*pz*sj1*x303);
IkReal x323=(cj1*r00*sj1);
CheckValue<IkReal> x324=IKPowWithIntegerCheck(IKsign((x302+x304+((x306*x309))+((x307*x309))+(((-1.0)*x302*x310))+(((-1.0)*x304*x310))+(((-1.0)*x305*x306))+(((-1.0)*x305*x307)))),-1);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal((((py*x311))+((py*x321))+((x301*x315))+((x313*(py*py*py)))+((x315*x316))+(((-1.0)*py*x318))+(((-1.0)*r01*x312))+(((-1.0)*r01*x314))+(((-1.0)*r01*x320))+(((-1.0)*r01*x322))+((py*r02*x301*x319))+(((-1.0)*px*py*r00*x317)))),IkReal((((px*x311))+((px*x321))+((x303*x323))+((x313*(px*px*px)))+((x316*x323))+(((-1.0)*px*x318))+(((-1.0)*r00*x312))+(((-1.0)*r00*x314))+(((-1.0)*r00*x320))+(((-1.0)*r00*x322))+((px*r02*x303*x319))+(((-1.0)*px*py*r01*x317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x324.value)))+(x325.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x326=px*px;
IkReal x327=py*py;
IkReal x328=pz*pz;
IkReal x329=(cj1*pz);
IkReal x330=IKcos(j0);
IkReal x331=(px*sj1*x330);
IkReal x332=IKsin(j0);
IkReal x333=(px*r00);
IkReal x334=(py*r01);
IkReal x335=(pz*r02);
IkReal x336=(cj1*r02);
IkReal x337=(r00*sj1*x330);
IkReal x338=(r01*sj1*x332);
IkReal x339=((1.0)*py);
IkReal x340=(sj1*x332);
IkReal x341=(sj1*x330);
IkReal x342=((2.0)*cj1*pz);
IkReal x343=((1.0)*cj1*r02);
IkReal x344=((2.0)*py*sj1*x332);
IkReal x345=((2.0)*px*sj1*x330);
IkReal x346=((1.0)*r01*sj1*x332);
IkReal x347=((1.0)*r00*sj1*x330);
evalcond[0]=((0.0684)+x326+x327+x328+(((-1.75)*x329))+(((-1.75)*x331))+(((-1.75)*py*sj1*x332)));
evalcond[1]=((-0.835)+x333+x334+x335+(((-0.875)*x336))+(((-0.875)*x337))+(((-0.875)*x338)));
evalcond[2]=((0.875)+(((0.835)*x336))+(((0.835)*x337))+(((0.835)*x338))+(((-1.0)*x329))+(((-1.0)*x331))+(((-1.0)*x339*x340)));
evalcond[3]=(((cj1*px*r01))+((py*r02*x341))+((pz*r00*x340))+(((-1.0)*cj1*r00*x339))+(((-1.0)*px*r02*x340))+(((-1.0)*pz*r01*x341)));
evalcond[4]=((((0.0684)*x336))+(((0.0684)*x337))+(((0.0684)*x338))+(((-1.75)*x333))+(((-1.75)*x334))+(((-1.75)*x335))+((x326*x337))+((x327*x338))+((x328*x336))+((x333*x342))+((x333*x344))+((x334*x342))+((x334*x345))+((x335*x344))+((x335*x345))+(((-1.0)*x326*x343))+(((-1.0)*x326*x346))+(((-1.0)*x327*x343))+(((-1.0)*x327*x347))+(((-1.0)*x328*x346))+(((-1.0)*x328*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x348=(py*r00);
IkReal x349=(px*r01);
IkReal x350=cj1*cj1;
IkReal x351=((0.954285714285714)*sj1);
IkReal x352=(px*x351);
IkReal x353=((0.0781714285714286)*sj1);
IkReal x354=(cj1*r02*sj1);
IkReal x355=(cj1*pz*sj1);
IkReal x356=((1.14285714285714)*py*sj1);
IkReal x357=(pz*r02);
IkReal x358=((1.14285714285714)*px*sj1);
IkReal x359=((0.954285714285714)*r01*sj1);
IkReal x360=((0.954285714285714)*r00*sj1);
IkReal x361=((1.14285714285714)*sj1);
IkReal x362=(py*x351);
CheckValue<IkReal> x363=IKPowWithIntegerCheck(IKsign((x348+(((-1.0)*x349))+((x349*x350))+(((-1.0)*x348*x350)))),-1);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364 = IKatan2WithCheck(IkReal((x352+((px*x354))+((r00*x353))+((x348*x359))+((x352*(r00*r00)))+((x357*x360))+(((-1.0)*x349*x356))+(((-1.0)*x357*x358))+(((-1.0)*r00*x355))+(((-1.0)*r00*x361*(px*px))))),IkReal(((((-1.0)*x362))+((r01*x355))+((x348*x358))+((x356*x357))+(((-1.0)*r01*x353))+(((-1.0)*x349*x360))+(((-1.0)*x357*x359))+(((-1.0)*x362*(r01*r01)))+(((-1.0)*py*x354))+((r01*x361*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x364.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x363.value)))+(x364.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x365=px*px;
IkReal x366=py*py;
IkReal x367=pz*pz;
IkReal x368=(cj1*pz);
IkReal x369=IKcos(j0);
IkReal x370=(px*sj1*x369);
IkReal x371=IKsin(j0);
IkReal x372=(px*r00);
IkReal x373=(py*r01);
IkReal x374=(pz*r02);
IkReal x375=(cj1*r02);
IkReal x376=(r00*sj1*x369);
IkReal x377=(r01*sj1*x371);
IkReal x378=((1.0)*py);
IkReal x379=(sj1*x371);
IkReal x380=(sj1*x369);
IkReal x381=((2.0)*cj1*pz);
IkReal x382=((1.0)*cj1*r02);
IkReal x383=((2.0)*py*sj1*x371);
IkReal x384=((2.0)*px*sj1*x369);
IkReal x385=((1.0)*r01*sj1*x371);
IkReal x386=((1.0)*r00*sj1*x369);
evalcond[0]=((0.0684)+x365+x366+x367+(((-1.75)*x368))+(((-1.75)*x370))+(((-1.75)*py*sj1*x371)));
evalcond[1]=((-0.835)+x372+x373+x374+(((-0.875)*x375))+(((-0.875)*x376))+(((-0.875)*x377)));
evalcond[2]=((0.875)+(((0.835)*x375))+(((0.835)*x376))+(((0.835)*x377))+(((-1.0)*x368))+(((-1.0)*x370))+(((-1.0)*x378*x379)));
evalcond[3]=(((cj1*px*r01))+((py*r02*x380))+((pz*r00*x379))+(((-1.0)*cj1*r00*x378))+(((-1.0)*px*r02*x379))+(((-1.0)*pz*r01*x380)));
evalcond[4]=((((0.0684)*x375))+(((0.0684)*x376))+(((0.0684)*x377))+(((-1.75)*x372))+(((-1.75)*x373))+(((-1.75)*x374))+((x365*x376))+((x366*x377))+((x367*x375))+((x372*x381))+((x372*x383))+((x373*x381))+((x373*x384))+((x374*x383))+((x374*x384))+(((-1.0)*x365*x382))+(((-1.0)*x365*x385))+(((-1.0)*x366*x382))+(((-1.0)*x366*x386))+(((-1.0)*x367*x385))+(((-1.0)*x367*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x387=((7.0)*sj1);
IkReal x388=((7.0)*cj1*r02);
IkReal x389=((7.0)*cj1*pz);
IkReal x390=((8.0)*px*py);
IkReal x391=((8.0)*pz*r02);
IkReal x392=((4.0)*(px*px));
IkReal x393=((4.0)*(py*py));
IkReal x394=((4.0)*(pz*pz));
CheckValue<IkReal> x395=IKPowWithIntegerCheck(IKsign((((px*r01*x387))+(((-1.0)*py*r00*x387)))),-1);
if(!x395.valid){
continue;
}
CheckValue<IkReal> x396 = IKatan2WithCheck(IkReal((((px*x391))+((r00*x389))+((r00*x392))+((r01*x390))+(((-1.0)*(6.68)*px))+(((-1.0)*(0.2736)*r00))+(((-1.0)*px*x388))+(((-1.0)*r00*x393))+(((-1.0)*r00*x394)))),IkReal(((((6.68)*py))+(((0.2736)*r01))+((py*x388))+((r01*x392))+((r01*x394))+(((-1.0)*py*x391))+(((-1.0)*r00*x390))+(((-1.0)*r01*x389))+(((-1.0)*r01*x393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x395.value)))+(x396.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x397=px*px;
IkReal x398=py*py;
IkReal x399=pz*pz;
IkReal x400=(cj1*pz);
IkReal x401=IKcos(j0);
IkReal x402=(px*sj1*x401);
IkReal x403=IKsin(j0);
IkReal x404=(px*r00);
IkReal x405=(py*r01);
IkReal x406=(pz*r02);
IkReal x407=(cj1*r02);
IkReal x408=(r00*sj1*x401);
IkReal x409=(r01*sj1*x403);
IkReal x410=((1.0)*py);
IkReal x411=(sj1*x403);
IkReal x412=(sj1*x401);
IkReal x413=((2.0)*cj1*pz);
IkReal x414=((1.0)*cj1*r02);
IkReal x415=((2.0)*py*sj1*x403);
IkReal x416=((2.0)*px*sj1*x401);
IkReal x417=((1.0)*r01*sj1*x403);
IkReal x418=((1.0)*r00*sj1*x401);
evalcond[0]=((0.0684)+x397+x398+x399+(((-1.75)*x400))+(((-1.75)*x402))+(((-1.75)*py*sj1*x403)));
evalcond[1]=((-0.835)+x404+x405+x406+(((-0.875)*x407))+(((-0.875)*x408))+(((-0.875)*x409)));
evalcond[2]=((0.875)+(((0.835)*x407))+(((0.835)*x408))+(((0.835)*x409))+(((-1.0)*x400))+(((-1.0)*x402))+(((-1.0)*x410*x411)));
evalcond[3]=(((cj1*px*r01))+((py*r02*x412))+((pz*r00*x411))+(((-1.0)*cj1*r00*x410))+(((-1.0)*px*r02*x411))+(((-1.0)*pz*r01*x412)));
evalcond[4]=((((0.0684)*x407))+(((0.0684)*x408))+(((0.0684)*x409))+(((-1.75)*x404))+(((-1.75)*x405))+(((-1.75)*x406))+((x397*x408))+((x398*x409))+((x399*x407))+((x404*x413))+((x404*x415))+((x405*x413))+((x405*x416))+((x406*x415))+((x406*x416))+(((-1.0)*x397*x414))+(((-1.0)*x397*x417))+(((-1.0)*x398*x414))+(((-1.0)*x398*x418))+(((-1.0)*x399*x417))+(((-1.0)*x399*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=(((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x94=((1.0)*sj1);
evalcond[0]=((0.875)+(((0.835)*(IKcos(j3))))+(((-1.0)*(1.0)*cj1*pz))+(((-1.0)*cj0*px*x94))+(((-1.0)*py*sj0*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x95=r00*r00;
IkReal x96=r02*r02;
IkReal x97=((2.0)*cj0);
IkReal x98=(r00*r01*sj0*x97);
IkReal x99=cj0*cj0;
IkReal x100=r01*r01;
IkReal x101=(x100*x99);
IkReal x102=cj1*cj1;
IkReal x103=(cj1*r01*sj0);
IkReal x104=(x95*x99);
IkReal x105=((1.0)*x102);
IkReal x106=(x101+x95+x96+(((-1.0)*x98))+(((-1.0)*x104))+((x100*x102))+((x102*x104))+((x102*x98))+(((-1.0)*x101*x105))+(((-1.0)*x105*x96))+(((-2.0)*r02*sj1*x103))+(((-1.0)*cj1*r00*r02*sj1*x97)));
IkReal x107=(cj0*sj3);
IkReal x108=((1.0)*sj3);
j2eval[0]=x106;
j2eval[1]=IKsign(x106);
j2eval[2]=((IKabs(((((-1.0)*r01*x107))+((r00*sj0*x108)))))+(IKabs((((sj3*x103))+((cj1*r00*x107))+(((-1.0)*r02*sj1*x108))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x109=px*px;
IkReal x110=pz*pz;
IkReal x111=(cj0*px*py*sj0);
IkReal x112=((2.0)*x111);
IkReal x113=cj0*cj0;
IkReal x114=py*py;
IkReal x115=(x113*x114);
IkReal x116=cj1*cj1;
IkReal x117=(x114*x116);
IkReal x118=(cj0*cj1*px*pz*sj1);
IkReal x119=(cj1*py*pz*sj0*sj1);
IkReal x120=(x109*x113);
IkReal x121=((1.0)*x116);
IkReal x122=((200.0)*x109);
IkReal x123=((200.0)*x110);
IkReal x124=((400.0)*x111);
IkReal x125=(x113*x122);
IkReal x126=((200.0)*x115);
IkReal x127=(cj0*sj3);
IkReal x128=((1.0)*sj3);
j2eval[0]=(x109+x110+x115+x117+(((-1.0)*x112))+(((-1.0)*x120))+(((-2.0)*x118))+(((-2.0)*x119))+((x112*x116))+((x116*x120))+(((-1.0)*x110*x121))+(((-1.0)*x115*x121)));
j2eval[1]=IKsign((x122+x123+x126+(((-1.0)*x124))+(((-1.0)*x125))+(((200.0)*x117))+(((-400.0)*x118))+(((-400.0)*x119))+((x116*x124))+((x116*x125))+(((-1.0)*x116*x123))+(((-1.0)*x116*x126))));
j2eval[2]=((IKabs(((((-1.0)*py*x127))+((px*sj0*x128)))))+(IKabs((((sj3*((cj1*py*sj0))))+((cj1*px*x127))+(((-1.0)*pz*sj1*x128))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x129=(pz*r02);
IkReal x130=cj0*cj0;
IkReal x131=(py*r01);
IkReal x132=(x130*x131);
IkReal x133=cj1*cj1;
IkReal x134=(px*r01*sj0);
IkReal x135=((1.0)*cj0*r00);
IkReal x136=(px*r00*x130);
IkReal x137=((1.0)*x133);
IkReal x138=(r02*sj1);
IkReal x139=(cj1*pz*sj1);
IkReal x140=(cj0*x133);
IkReal x141=(x129+x132+(((-1.0)*x136))+((px*r00))+((x131*x133))+((x133*x136))+((x134*x140))+(((-1.0)*x129*x137))+(((-1.0)*x132*x137))+(((-1.0)*x135*x139))+(((-1.0)*cj0*x134))+(((-1.0)*py*sj0*x135))+(((-1.0)*r01*sj0*x139))+((py*r00*sj0*x140))+(((-1.0)*cj0*cj1*px*x138))+(((-1.0)*cj1*py*sj0*x138)));
IkReal x142=(cj0*sj3);
IkReal x143=((1.0)*sj3);
j2eval[0]=x141;
j2eval[1]=IKsign(x141);
j2eval[2]=((IKabs(((((-1.0)*py*x142))+((px*sj0*x143)))))+(IKabs((((sj3*((cj1*py*sj0))))+((cj1*px*x142))+(((-1.0)*pz*sj1*x143))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
j2eval[0]=((IKabs((((cj0*py))+(((-1.0)*(1.0)*px*sj0)))))+(IKabs((((cj0*cj1*px))+((cj1*py*sj0))+(((-1.0)*(1.0)*pz*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
j2eval[0]=((IKabs((((cj0*r01))+(((-1.0)*(1.0)*r00*sj0)))))+(IKabs((((cj0*cj1*r00))+((cj1*r01*sj0))+(((-1.0)*(1.0)*r02*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j4]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal((((cj0*cj1*r00))+((cj1*r01*sj0))+(((-1.0)*(1.0)*r02*sj1)))),IkReal((((cj0*r01))+(((-1.0)*(1.0)*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
IkReal x144=((-1.0)*(x145.value));
j2array[0]=x144;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x144);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x146=IKsin(j2);
IkReal x147=(cj0*py);
IkReal x148=((1.0)*px*sj0);
IkReal x149=IKcos(j2);
IkReal x150=((1.0)*x149);
IkReal x151=(cj1*px);
IkReal x152=(cj0*x149);
IkReal x153=(cj1*py*sj0);
IkReal x154=(sj1*x146);
IkReal x155=((1.0)*cj0*x146);
IkReal x156=((1.0)*x146);
evalcond[0]=(((x146*x147))+((x149*x153))+((x151*x152))+(((-1.0)*x146*x148))+(((-1.0)*pz*sj1*x150)));
evalcond[1]=(((pz*x154))+((x147*x149))+(((-1.0)*x148*x149))+(((-1.0)*x151*x155))+(((-1.0)*x153*x156)));
evalcond[2]=(((r01*x152))+((r02*x154))+(((-1.0)*cj1*r00*x155))+(((-1.0)*r00*sj0*x150))+(((-1.0)*cj1*r01*sj0*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal((((cj0*cj1*px))+((cj1*py*sj0))+(((-1.0)*(1.0)*pz*sj1)))),IkReal((((cj0*py))+(((-1.0)*(1.0)*px*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
IkReal x157=((-1.0)*(x158.value));
j2array[0]=x157;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x157);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x159=IKsin(j2);
IkReal x160=((1.0)*sj0*x159);
IkReal x161=IKcos(j2);
IkReal x162=(cj1*r00);
IkReal x163=(cj0*x161);
IkReal x164=(cj1*r01);
IkReal x165=(sj1*x159);
IkReal x166=((1.0)*sj0*x161);
IkReal x167=((1.0)*cj0*x159);
evalcond[0]=(((x162*x163))+(((-1.0)*r00*x160))+((cj0*r01*x159))+((sj0*x161*x164))+(((-1.0)*r02*sj1*x161)));
evalcond[1]=(((py*x163))+((pz*x165))+(((-1.0)*px*x166))+(((-1.0)*cj1*px*x167))+(((-1.0)*cj1*py*x160)));
evalcond[2]=(((r01*x163))+((r02*x165))+(((-1.0)*r00*x166))+(((-1.0)*x160*x164))+(((-1.0)*x162*x167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j2eval[0]=((IKabs((((cj0*py))+(((-1.0)*(1.0)*px*sj0)))))+(IKabs((((cj0*cj1*px))+((cj1*py*sj0))+(((-1.0)*(1.0)*pz*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j2eval[0]=((IKabs((((cj0*r01))+(((-1.0)*(1.0)*r00*sj0)))))+(IKabs((((cj0*cj1*r00))+((cj1*r01*sj0))+(((-1.0)*(1.0)*r02*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j4]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal((((cj0*cj1*r00))+((cj1*r01*sj0))+(((-1.0)*(1.0)*r02*sj1)))),IkReal((((cj0*r01))+(((-1.0)*(1.0)*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
IkReal x168=((-1.0)*(x169.value));
j2array[0]=x168;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x168);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x170=IKsin(j2);
IkReal x171=(cj0*py);
IkReal x172=((1.0)*px*sj0);
IkReal x173=IKcos(j2);
IkReal x174=((1.0)*x173);
IkReal x175=(cj1*px);
IkReal x176=(cj0*x173);
IkReal x177=(cj1*py*sj0);
IkReal x178=(sj1*x170);
IkReal x179=((1.0)*cj0*x170);
IkReal x180=((1.0)*x170);
evalcond[0]=(((x170*x171))+((x173*x177))+((x175*x176))+(((-1.0)*x170*x172))+(((-1.0)*pz*sj1*x174)));
evalcond[1]=(((pz*x178))+((x171*x173))+(((-1.0)*x172*x173))+(((-1.0)*x175*x179))+(((-1.0)*x177*x180)));
evalcond[2]=(((r01*x176))+((r02*x178))+(((-1.0)*cj1*r00*x179))+(((-1.0)*r00*sj0*x174))+(((-1.0)*cj1*r01*sj0*x180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x182 = IKatan2WithCheck(IkReal((((cj0*cj1*px))+((cj1*py*sj0))+(((-1.0)*(1.0)*pz*sj1)))),IkReal((((cj0*py))+(((-1.0)*(1.0)*px*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
IkReal x181=((-1.0)*(x182.value));
j2array[0]=x181;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x181);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x183=IKsin(j2);
IkReal x184=((1.0)*sj0*x183);
IkReal x185=IKcos(j2);
IkReal x186=(cj1*r00);
IkReal x187=(cj0*x185);
IkReal x188=(cj1*r01);
IkReal x189=(sj1*x183);
IkReal x190=((1.0)*sj0*x185);
IkReal x191=((1.0)*cj0*x183);
evalcond[0]=(((x186*x187))+(((-1.0)*r00*x184))+((cj0*r01*x183))+((sj0*x185*x188))+(((-1.0)*r02*sj1*x185)));
evalcond[1]=(((py*x187))+((pz*x189))+(((-1.0)*px*x190))+(((-1.0)*cj1*px*x191))+(((-1.0)*cj1*py*x184)));
evalcond[2]=(((r01*x187))+((r02*x189))+(((-1.0)*r00*x190))+(((-1.0)*x184*x188))+(((-1.0)*x186*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x192=(cj0*sj3);
IkReal x193=((1.0)*sj3);
IkReal x194=(pz*r02);
IkReal x195=cj0*cj0;
IkReal x196=(py*r01);
IkReal x197=(x195*x196);
IkReal x198=cj1*cj1;
IkReal x199=(px*r01*sj0);
IkReal x200=((1.0)*cj0*r00);
IkReal x201=(px*r00*x195);
IkReal x202=((1.0)*x198);
IkReal x203=(r02*sj1);
IkReal x204=(cj1*pz*sj1);
IkReal x205=(cj0*x198);
CheckValue<IkReal> x206=IKPowWithIntegerCheck(IKsign((x194+x197+(((-1.0)*x201))+((px*r00))+((x196*x198))+((x198*x201))+((x199*x205))+(((-1.0)*x194*x202))+(((-1.0)*x197*x202))+(((-1.0)*x200*x204))+(((-1.0)*cj0*x199))+(((-1.0)*py*sj0*x200))+(((-1.0)*r01*sj0*x204))+((py*r00*sj0*x205))+(((-1.0)*cj0*cj1*px*x203))+(((-1.0)*cj1*py*sj0*x203)))),-1);
if(!x206.valid){
continue;
}
CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal((((py*x192))+(((-1.0)*px*sj0*x193)))),IkReal((((sj3*((cj1*py*sj0))))+((cj1*px*x192))+(((-1.0)*pz*sj1*x193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x207.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x206.value)))+(x207.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x208=IKcos(j2);
IkReal x209=(cj0*py);
IkReal x210=IKsin(j2);
IkReal x211=(sj1*x210);
IkReal x212=((1.0)*px*sj0);
IkReal x213=((1.0)*cj0*cj1*x210);
IkReal x214=((1.0)*cj1*sj0*x210);
IkReal x215=(cj0*r01);
IkReal x216=(r00*sj0);
IkReal x217=((1.0)*sj1*x208);
IkReal x218=(cj0*cj1*x208);
IkReal x219=(cj1*sj0*x208);
evalcond[0]=(((pz*x211))+((x208*x209))+(((-1.0)*px*x213))+(((-1.0)*py*x214))+(((-1.0)*x208*x212)));
evalcond[1]=(((r02*x211))+((x208*x215))+(((-1.0)*r00*x213))+(((-1.0)*r01*x214))+(((-1.0)*x208*x216)));
evalcond[2]=(((px*x218))+((py*x219))+((x209*x210))+(((-1.0)*(0.835)*sj3))+(((-1.0)*pz*x217))+(((-1.0)*x210*x212)));
evalcond[3]=(((r00*x218))+((r01*x219))+((x210*x215))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r02*x217))+(((-1.0)*x210*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x220=((167.0)*cj0*sj3);
IkReal x221=((167.0)*sj3);
IkReal x222=(cj1*py*sj0);
IkReal x223=((200.0)*(px*px));
IkReal x224=((200.0)*(pz*pz));
IkReal x225=((400.0)*cj0);
IkReal x226=(px*py*sj0*x225);
IkReal x227=cj0*cj0;
IkReal x228=(x223*x227);
IkReal x229=((200.0)*(py*py));
IkReal x230=(x227*x229);
IkReal x231=cj1*cj1;
CheckValue<IkReal> x232=IKPowWithIntegerCheck(IKsign((x223+x224+x230+(((-1.0)*x226))+(((-1.0)*x228))+((x226*x231))+((x228*x231))+((x229*x231))+(((-1.0)*x224*x231))+(((-1.0)*x230*x231))+(((-400.0)*pz*sj1*x222))+(((-1.0)*cj1*px*pz*sj1*x225)))),-1);
if(!x232.valid){
continue;
}
CheckValue<IkReal> x233 = IKatan2WithCheck(IkReal((((py*x220))+(((-1.0)*px*sj0*x221)))),IkReal((((x221*x222))+((cj1*px*x220))+(((-1.0)*pz*sj1*x221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x233.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x232.value)))+(x233.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x234=IKcos(j2);
IkReal x235=(cj0*py);
IkReal x236=IKsin(j2);
IkReal x237=(sj1*x236);
IkReal x238=((1.0)*px*sj0);
IkReal x239=((1.0)*cj0*cj1*x236);
IkReal x240=((1.0)*cj1*sj0*x236);
IkReal x241=(cj0*r01);
IkReal x242=(r00*sj0);
IkReal x243=((1.0)*sj1*x234);
IkReal x244=(cj0*cj1*x234);
IkReal x245=(cj1*sj0*x234);
evalcond[0]=(((pz*x237))+((x234*x235))+(((-1.0)*px*x239))+(((-1.0)*py*x240))+(((-1.0)*x234*x238)));
evalcond[1]=(((r02*x237))+((x234*x241))+(((-1.0)*r00*x239))+(((-1.0)*r01*x240))+(((-1.0)*x234*x242)));
evalcond[2]=(((px*x244))+((py*x245))+((x235*x236))+(((-1.0)*(0.835)*sj3))+(((-1.0)*pz*x243))+(((-1.0)*x236*x238)));
evalcond[3]=(((r00*x244))+((r01*x245))+((x236*x241))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r02*x243))+(((-1.0)*x236*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x246=(cj0*sj3);
IkReal x247=((1.0)*sj3);
IkReal x248=(cj1*r01*sj0);
IkReal x249=r00*r00;
IkReal x250=r02*r02;
IkReal x251=((2.0)*cj0);
IkReal x252=(r00*r01*sj0*x251);
IkReal x253=cj0*cj0;
IkReal x254=r01*r01;
IkReal x255=(x253*x254);
IkReal x256=cj1*cj1;
IkReal x257=(x249*x253);
IkReal x258=((1.0)*x256);
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKsign((x249+x250+x255+(((-1.0)*x252))+(((-1.0)*x257))+((x252*x256))+((x254*x256))+((x256*x257))+(((-1.0)*x250*x258))+(((-1.0)*x255*x258))+(((-2.0)*r02*sj1*x248))+(((-1.0)*cj1*r00*r02*sj1*x251)))),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal((((r01*x246))+(((-1.0)*r00*sj0*x247)))),IkReal((((sj3*x248))+((cj1*r00*x246))+(((-1.0)*r02*sj1*x247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x259.value)))+(x260.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x261=IKcos(j2);
IkReal x262=(cj0*py);
IkReal x263=IKsin(j2);
IkReal x264=(sj1*x263);
IkReal x265=((1.0)*px*sj0);
IkReal x266=((1.0)*cj0*cj1*x263);
IkReal x267=((1.0)*cj1*sj0*x263);
IkReal x268=(cj0*r01);
IkReal x269=(r00*sj0);
IkReal x270=((1.0)*sj1*x261);
IkReal x271=(cj0*cj1*x261);
IkReal x272=(cj1*sj0*x261);
evalcond[0]=(((pz*x264))+((x261*x262))+(((-1.0)*px*x266))+(((-1.0)*py*x267))+(((-1.0)*x261*x265)));
evalcond[1]=(((r02*x264))+((x261*x268))+(((-1.0)*r00*x266))+(((-1.0)*r01*x267))+(((-1.0)*x261*x269)));
evalcond[2]=(((px*x271))+((py*x272))+((x262*x263))+(((-1.0)*(0.835)*sj3))+(((-1.0)*pz*x270))+(((-1.0)*x263*x265)));
evalcond[3]=(((r00*x271))+((r01*x272))+((x263*x268))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r02*x270))+(((-1.0)*x263*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - robotic_arm (43cf1318008f4ac7196e36b0c53385c0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
